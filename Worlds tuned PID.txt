#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
left_motor_a = Motor(Ports.PORT21, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_drive_smart = MotorGroup(left_motor_a, left_motor_b)
right_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b)
drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 299.24, 317.5, 256.53999999999996, MM, 0.75)
IntakeBelt = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)
IntakeWheels = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)
LadyBrown = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
ColorSort = Optical(Ports.PORT12)
LadyBrownRoto = Rotation(Ports.PORT1, False)
controller_1 = Controller(PRIMARY)
mogoPiston1 = DigitalOut(brain.three_wire_port.g)
mogoPiston2 = DigitalOut(brain.three_wire_port.h)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")



# define variables used for controlling motors based on controller inputs
controller_1_right_shoulder_control_motors_stopped = True
drivetrain_l_needs_to_be_stopped_controller_1 = False
drivetrain_r_needs_to_be_stopped_controller_1 = False

# define a task that will handle monitoring inputs from controller_1
def rc_auto_loop_function_controller_1():
    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axis2 + axis4
            # right = axis2 - axis4
            drivetrain_left_side_speed = controller_1.axis2.position() + controller_1.axis4.position()
            drivetrain_right_side_speed = controller_1.axis2.position() - controller_1.axis4.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller_1:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller_1 = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller_1:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller_1 = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller_1:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller_1:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
            # check the buttonR1/buttonR2 status
            # to control IntakeBelt
            if controller_1.buttonR1.pressing():
                IntakeBelt.spin(FORWARD)
                controller_1_right_shoulder_control_motors_stopped = False
            elif controller_1.buttonR2.pressing():
                IntakeBelt.spin(REVERSE)
                controller_1_right_shoulder_control_motors_stopped = False
            elif not controller_1_right_shoulder_control_motors_stopped:
                IntakeBelt.stop()
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_1_right_shoulder_control_motors_stopped = True
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)

#endregion VEXcode Generated Robot Configuration
from vex import *
import math

# Setup
brain = Brain()

# Motors
left_motor_a = Motor(Ports.PORT21, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT19, GearSetting.RATIO_6_1, True)
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)

right_motor_a = Motor(Ports.PORT18, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT4, GearSetting.RATIO_6_1, False)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)

# PID drive with your constants
def drive_forward_pid(target_inches):
    # Constants
    kP = 0.02
    kI = 0.001
    kD = 0.2

    max_speed = 30
    min_speed = 5
    exit_error_threshold = 1.0  # Allow 1 degree of error before stopping
    deadband = 0.5  # Small range where no corrections happen
    hold_threshold = 5  # Threshold for holding position

    # Convert inches to degrees
    wheel_diameter = 3.25
    wheel_circumference = wheel_diameter * math.pi
    target_degrees = (target_inches / wheel_circumference) * 360

    left_drive_smart.reset_position()
    right_drive_smart.reset_position()
    left_drive_smart.set_stopping(BRAKE)
    
    right_drive_smart.set_stopping(BRAKE)

    left_pos = left_drive_smart.position(DEGREES)
    right_pos = right_drive_smart.position(DEGREES)

    error = target_degrees
    last_error = 0
    total_error = 0

    while True:
        if(left_pos <= target_degrees and right_pos <= target_degrees):
            # Read motor positions
            left_pos = left_drive_smart.position(DEGREES)
            right_pos = right_drive_smart.position(DEGREES)
            avg_pos = (left_pos + right_pos) / 2

            print ("target_degrees: ", target_degrees, " left_pos: ", left_pos, " right_pos: ", right_pos)

            # PID calculations
            error = target_degrees - avg_pos
            total_error += error
            derivative = error - last_error
            last_error = error

            # PID output
            output = (kP * error) + (kI * total_error) + (kD * derivative)
            output = max(min(output, max_speed), -max_speed)

            # Apply power
            left_drive_smart.spin(FORWARD, output, PERCENT)
            right_drive_smart.spin(FORWARD, output, PERCENT)

            # Check if within deadband (no further correction needed)
            if abs(error) < deadband:
                # If the robot is within a small error range for a few milliseconds, stop
                wait(200, MSEC)  # Wait a moment to confirm it stays within deadband
                if abs(error) < deadband:  # Still within deadband, stop now
                    break

            wait(10, MSEC)

        
            # Final adjustment: stop the motors and hold the position
        else:
            print("Stopping - target_degrees: ", target_degrees, " left_pos: ", left_pos, " right_pos: ", right_pos)
            left_drive_smart.stop()
            right_drive_smart.stop()

# Main
def when_started():
    drive_forward_pid(48)  # Drive forward exactly 50 inches

when_started()

