{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n# AI Classification Competition Element IDs\nclass GameElements:\n    MOBILE_GOAL = 0\n    RED_RING = 1\n    BLUE_RING = 2\n# AI Vision Color Descriptions\n# AI Vision Code Descriptions\nai_vision_13 = AiVision(Ports.PORT12, AiVision.ALL_AIOBJS)\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nleft_motor_b = Motor(Ports.PORT8, GearSetting.RATIO_6_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\nright_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 219.44, 2913.6339999999996, 311.15, MM, 0.4444444444444444)\ncontroller_1 = Controller(PRIMARY)\nIntakeBelt = Motor(Ports.PORT2, GearSetting.RATIO_6_1, False)\nIntakewheels = Motor(Ports.PORT18, GearSetting.RATIO_6_1, True)\nMogoPiston1 = DigitalOut(brain.three_wire_port.c)\nMogotPiston2 = DigitalOut(brain.three_wire_port.d)\nCornerClear = DigitalOut(brain.three_wire_port.f)\nOdomLEFT = Rotation(Ports.PORT19, False)\nodomRIGHT = Rotation(Ports.PORT14, False)\nintertial = Inertial(Ports.PORT20)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis2 + axis4\n            # right = axis2 - axis4\n            drivetrain_left_side_speed = controller_1.axis2.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis2.position() - controller_1.axis4.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n#   Project:      VEXcode Project\n#   Author:       VEX\n#   Created:\n#   Description:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\nimport math\n# Begin project code\n\nid_to_name = {\n    0: \"Mobile Goal\",\n    1: \"Red Ring\",\n    2: \"Blue Ring\"\n}\ndrive_condition = False #Right, Left, or Straight\n\n\nKp = 0.15\nKi = 0.01\nKd = 0.05\n\nintegral = 0\n\nprev_error = 0\n\ndrivetrain.set_turn_velocity(5, PERCENT)\n  #screenshot sent from here  \ndef getdist(H_cam, H_obj, pixel_height, VFOV_deg=63, img_height_px=240):\n    # Step 1: Convert pixel height into angular size\n    VFOV_rad = math.radians(VFOV_deg)\n    alpha_rad = (pixel_height / img_height_px) * VFOV_rad\n\n    # Step 2: Estimate slant distance from angular size\n    S = H_obj / (2 * math.tan(alpha_rad / 2))\n\n    S_squared = S**2\n    H_squared = H_cam**2\n    D_horizontal = math.sqrt(abs(S_squared - H_squared))  # Use abs to protect from tiny negative values due to rounding\n\n    return D_horizontal\n\nwhile True:\n    ai_objects = ai_vision_12.take_snapshot(AiVision.ALL_AIOBJS)\n\n    if len(ai_objects) == 0:\n        print(\"No objects detected. Sleeping...\")\n        drivetrain.stop()\n        continue\n\n    minDist = float(\"inf\")\n    close = None\n    t_center = 160  \n\n    for obj in ai_objects:\n        if obj.exists and obj.score >= 80:\n            obj_dist = getdist(10, 2, obj.height, 63, 240)\n\n            if obj_dist < minDist:\n                minDist = obj_dist\n                close = obj  \n              \n    if close:\n        obj_id = close.id\n        obj_center_x = close.centerX\n        obj_center_y = close.centerY\n        obj_height = close.height\n        obj_score = close.score\n        obj_name = id_to_name.get(obj_id, \"Unknown\")\n\n        print(\"Name: \")\n        print(obj_name, \"\\n\")\n        print(\"Height: \")\n        print(obj_height, \"\\n\")\n        # print(\"Center X: \")\n        # print(obj_center_x, \"\\n\")\n        # print(\"Center Y: \")\n        # print(obj_center_y, \"\\n\")\n        print(\"Score: \")\n        print(obj_score, \"\\n\")\n\n        error = obj_center_x - t_center\n    \n\n        integral = integral + error\n\n        derivative = error - prev_error\n\n        prev_error = error\n\n        pid_out = (Kp * error) + (Ki * integral) + (Kd * derivative)\n\n        print(\"Target \", obj_name, \", X:\", obj_center_x, \", Distance:\", minDist)\n        #if i want i can print obj_center_x but its not needed for now. \n        print(\"error is:\",error)\n\n        print(\"PID OUTPUT:\", pid_out)\n\n        if abs(error) > 10: # pid_out > 10\n            if pid_out > 0:\n                print(\"Turning RIGHT\")\n                drive_condition = \"RIGHT\"\n            else:\n                print(\"Turning LEFT\")\n                drive_condition = \"LEFT\"\n        else:\n            print(\"Going STRAIGHT\")\n            drive_condition = \"STRAIGHT\"\n\n        print(\"Moving towards:\", obj_name)\n\n        if drive_condition == \"RIGHT\":\n            drivetrain.turn(RIGHT)\n            #wait(10, MSEC)\n        elif drive_condition == \"LEFT\":\n            drivetrain.turn(LEFT)\n            #wait(10, MSEC)\n        elif drive_condition == \"STRAIGHT\":\n            drivetrain.stop()\n    else:\n        drivetrain.stop()\n\n            ","textLanguage":"python","robotConfig":[{"port":[12],"name":"ai_vision_13","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[3,8,4,1,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel275in","gear":"ratio6_1","gearRatio":"16:36","direction":"fwd","gyroType":"none","width":"114.71","unit":"in","wheelbase":"12.25","wheelbaseUnit":"in","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"splitRight","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"IntakeBelt","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[18],"name":"Intakewheels","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"MogoPiston1","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[4],"name":"MogotPiston2","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[6],"name":"CornerClear","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[19],"name":"OdomLEFT","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[14],"name":"odomRIGHT","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"intertial","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}